import{_ as s,c as i,o as a,a8 as n}from"./chunks/framework.DCTOVl6H.js";const l="/assets/lanqiao_2017_national.D-hBv2Ij.png",b=JSON.parse('{"title":"深入解析：蓝桥杯多进制计算器题目的Python实现","description":"","frontmatter":{"date":"2024-1-13"},"headers":[],"relativePath":"src/blogs/algorithm/lanqiao_2017_national/index.md","filePath":"src/blogs/algorithm/lanqiao_2017_national/index.md"}'),e={name:"src/blogs/algorithm/lanqiao_2017_national/index.md"},p=n('<h1 id="深入解析-蓝桥杯多进制计算器题目的python实现" tabindex="-1">深入解析：蓝桥杯多进制计算器题目的Python实现 <a class="header-anchor" href="#深入解析-蓝桥杯多进制计算器题目的python实现" aria-label="Permalink to &quot;深入解析：蓝桥杯多进制计算器题目的Python实现&quot;">​</a></h1><nav class="table-of-contents"><ul><li><a href="#简介">简介</a></li><li><a href="#一、题目">一、题目</a></li><li><a href="#二、代码概览">二、代码概览</a></li><li><a href="#三、详细解析">三、详细解析</a><ul><li><a href="#_1-数制转换函数-todecimal">1. 数制转换函数 toDecimal</a></li><li><a href="#_2-数制转换函数-toanybasenum">2. 数制转换函数 toAnyBaseNum</a></li><li><a href="#_3-运算操作字典-operations">3. 运算操作字典 operations</a></li><li><a href="#_4-主循环">4. 主循环</a></li><li><a href="#_5-命令处理逻辑">5. 命令处理逻辑</a></li></ul></li><li><a href="#四、技术细节">四、技术细节</a><ul><li><a href="#_1-int-char-base-36-这玩意">1. int(char, base=36)这玩意</a></li><li><a href="#_2-chr-ord-a-decimalnum-basenum-10-这玩意">2. chr(ord(&#39;A&#39;) + decimalNum % baseNum - 10))这玩意</a></li><li><a href="#_3-join-reversed-digits-这玩意">3. &#39; &#39;.join(reversed(digits))这玩意</a></li><li><a href="#_4-add-lambda-a-b-a-b-这玩意">4. &#39;ADD&#39;: lambda a, b: a + b,这玩意</a></li><li><a href="#_5-s-input-split-maxsplit-1-这玩意">5. s = input().split(maxsplit=1)这玩意</a></li><li><a href="#_6-operations-op-result-num-这玩意">6. operations[op](result, num)这玩意</a></li></ul></li><li><a href="#总结">总结</a></li></ul></nav><h2 id="简介" tabindex="-1">简介 <a class="header-anchor" href="#简介" aria-label="Permalink to &quot;简介&quot;">​</a></h2><p>简述蓝桥杯题目的要求和这段代码的功能——一个支持多进制运算的计算器。</p><h2 id="一、题目" tabindex="-1">一、题目 <a class="header-anchor" href="#一、题目" aria-label="Permalink to &quot;一、题目&quot;">​</a></h2><p><img src="'+l+`" alt="题目描述" loading="lazy"></p><h2 id="二、代码概览" tabindex="-1">二、代码概览 <a class="header-anchor" href="#二、代码概览" aria-label="Permalink to &quot;二、代码概览&quot;">​</a></h2><div class="vp-code-group vp-adaptive-theme"><div class="tabs"><input type="radio" name="group-ALWpP" id="tab-K9dbwYR" checked><label for="tab-K9dbwYR">python</label></div><div class="blocks"><div class="language-python vp-adaptive-theme active line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> os</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> sys</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">n </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> int</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">input</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">())</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">def</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> toDecimal</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(baseNumStr, baseNum):</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    result </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 0</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    for</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> char </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">in</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> baseNumStr:</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        result </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> result </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">*</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> baseNum </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">+</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> int</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(char, </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">base</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">36</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    return</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> result</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    </span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">def</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> toAnyBaseNum</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(decimalNum, baseNum):</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> decimalNum </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">==</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">        return</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;0&#39;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    digits </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> []</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    while</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> decimalNum:</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        digits.append(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">str</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(decimalNum </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">%</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> baseNum) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> decimalNum </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">%</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> baseNum </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&lt;</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 10</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> else</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> chr</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">ord</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;A&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">+</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> decimalNum </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">%</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> baseNum </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 10</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">))</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        decimalNum </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">//=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> baseNum</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    return</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.join(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">reversed</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(digits)) </span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">operations </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">    &#39;ADD&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">lambda</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> a, b: a </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">+</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> b,</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">    &#39;SUB&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">lambda</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> a, b: a </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> b,</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">    &#39;MUL&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">lambda</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> a, b: a </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">*</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> b,</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">    &#39;DIV&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">lambda</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> a, b: a </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">//</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> b,</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">    &#39;MOD&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">lambda</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> a, b: a </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">%</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> b,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">result </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 0</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">baseNum </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 10</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">op </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;&#39;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">for</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> _ </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">in</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> range</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(n):</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    s </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> input</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">().split(</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">maxsplit</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    cmd </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> s[</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">]</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    arg </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> s[</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">] </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">if</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> len</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(s) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&gt;</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 1</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> else</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> None</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> cmd </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">==</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;CLEAR&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        result </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 0</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        op </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;&#39;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    elif</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> cmd </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">==</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;EQUAL&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">        print</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(toAnyBaseNum(result, baseNum))</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        op </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;&#39;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    elif</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> cmd </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">==</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;CHANGE&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        baseNum </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> int</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(arg)</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    elif</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> cmd </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">==</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;NUM&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        num </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> toDecimal(arg, baseNum)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        result </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> num </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">if</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> not</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> op </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">else</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> operations[op](result, num)</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    else</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        op </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> cmd</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br><span class="line-number">33</span><br><span class="line-number">34</span><br><span class="line-number">35</span><br><span class="line-number">36</span><br><span class="line-number">37</span><br><span class="line-number">38</span><br><span class="line-number">39</span><br><span class="line-number">40</span><br><span class="line-number">41</span><br><span class="line-number">42</span><br><span class="line-number">43</span><br><span class="line-number">44</span><br><span class="line-number">45</span><br><span class="line-number">46</span><br><span class="line-number">47</span><br><span class="line-number">48</span><br><span class="line-number">49</span><br></div></div></div></div><h2 id="三、详细解析" tabindex="-1">三、详细解析 <a class="header-anchor" href="#三、详细解析" aria-label="Permalink to &quot;三、详细解析&quot;">​</a></h2><h3 id="_1-数制转换函数-todecimal" tabindex="-1">1. 数制转换函数 <code>toDecimal</code> <a class="header-anchor" href="#_1-数制转换函数-todecimal" aria-label="Permalink to &quot;1. 数制转换函数 \`toDecimal\`&quot;">​</a></h3><div class="vp-code-group vp-adaptive-theme"><div class="tabs"><input type="radio" name="group-bkVwg" id="tab-VLmUElO" checked><label for="tab-VLmUElO">python</label></div><div class="blocks"><div class="language-python vp-adaptive-theme active line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">def</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> toDecimal</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(baseNumStr, baseNum):</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    result </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 0</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    for</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> char </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">in</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> baseNumStr:</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        result </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> result </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">*</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> baseNum </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">+</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> int</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(char, </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">base</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">36</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    return</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> result</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div></div></div><ul><li>这个函数用于将一个字符串 <code>baseNumStr</code>（表示一个数），从其原始进制 <code>baseNum</code> 转换为十进制。</li><li><code>result</code> 初始化为 0，然后对 <code>baseNumStr</code> 中的每个字符进行遍历。</li><li>每个字符（代表一个数字）先被转换为十进制数，然后累加到 <code>result</code> 中，同时每次迭代都将 <code>result</code> 乘以基数 <code>baseNum</code>。</li><li>最终返回转换后的十进制数 <code>result</code>。</li></ul><h3 id="_2-数制转换函数-toanybasenum" tabindex="-1">2. 数制转换函数 <code>toAnyBaseNum</code> <a class="header-anchor" href="#_2-数制转换函数-toanybasenum" aria-label="Permalink to &quot;2. 数制转换函数 \`toAnyBaseNum\`&quot;">​</a></h3><div class="vp-code-group vp-adaptive-theme"><div class="tabs"><input type="radio" name="group-k23qj" id="tab-a0Dug8-" checked><label for="tab-a0Dug8-">python</label></div><div class="blocks"><div class="language-python vp-adaptive-theme active line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">def</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> toAnyBaseNum</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(decimalNum, baseNum):</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> decimalNum </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">==</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">        return</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;0&#39;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    digits </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> []</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    while</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> decimalNum:</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        digits.append(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">str</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(decimalNum </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">%</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> baseNum) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> decimalNum </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">%</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> baseNum </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&lt;</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 10</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> else</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> chr</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">ord</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;A&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">+</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> decimalNum </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">%</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> baseNum </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 10</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">))</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        decimalNum </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">//=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> baseNum</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    return</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.join(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">reversed</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(digits))</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br></div></div></div></div><ul><li>这个函数将十进制数 <code>decimalNum</code> 转换为基数为 <code>baseNum</code> 的字符串表示。</li><li>如果 <code>decimalNum</code> 是 0，直接返回字符串 <code>&#39;0&#39;</code>。</li><li>使用 <code>digits</code> 列表收集转换后的每一位。</li><li>循环中，使用取模运算得到最低位，并根据结果是数字还是字母（对于大于9的值）添加到 <code>digits</code> 中。</li><li>除以基数 <code>baseNum</code> 准备下一次迭代。</li><li>最后，将 <code>digits</code> 中的元素反转并拼接成字符串。</li></ul><h3 id="_3-运算操作字典-operations" tabindex="-1">3. 运算操作字典 <code>operations</code> <a class="header-anchor" href="#_3-运算操作字典-operations" aria-label="Permalink to &quot;3. 运算操作字典 \`operations\`&quot;">​</a></h3><div class="vp-code-group vp-adaptive-theme"><div class="tabs"><input type="radio" name="group-93DMX" id="tab-_m2iFfW" checked><label for="tab-_m2iFfW">python</label></div><div class="blocks"><div class="language-python vp-adaptive-theme active line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">operations </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">    &#39;ADD&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">lambda</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> a, b: a </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">+</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> b,</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">    &#39;SUB&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">lambda</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> a, b: a </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> b,</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">    &#39;MUL&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">lambda</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> a, b: a </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">*</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> b,</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">    &#39;DIV&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">lambda</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> a, b: a </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">//</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> b,</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">    &#39;MOD&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">lambda</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> a, b: a </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">%</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> b,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br></div></div></div></div><ul><li>一个字典，映射运算符字符串到相应的 lambda 函数。</li><li>每个 lambda 函数接受两个参数 <code>a</code> 和 <code>b</code>，并执行相应的运算。</li></ul><h3 id="_4-主循环" tabindex="-1">4. 主循环 <a class="header-anchor" href="#_4-主循环" aria-label="Permalink to &quot;4. 主循环&quot;">​</a></h3><div class="vp-code-group vp-adaptive-theme"><div class="tabs"><input type="radio" name="group-N9LEH" id="tab-x9blWQ6" checked><label for="tab-x9blWQ6">python</label></div><div class="blocks"><div class="language-python vp-adaptive-theme active line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">result </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 0</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">baseNum </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 10</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">op </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;&#39;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">for</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> _ </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">in</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> range</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(n):</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    s </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> input</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">().split(</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">maxsplit</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    cmd </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> s[</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">]</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    arg </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> s[</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">] </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">if</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> len</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(s) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&gt;</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 1</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> else</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> None</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    # ...（命令处理逻辑）</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br></div></div></div></div><ul><li>初始化 <code>result</code>（存储当前计算结果），<code>baseNum</code>（当前基数，默认为10），和 <code>op</code>（当前操作符）。</li><li>使用 <code>for</code> 循环读取 <code>n</code> 条命令。</li><li>每条命令通过 <code>input()</code> 读取，然后用 <code>split</code> 分割成命令和参数。</li></ul><h3 id="_5-命令处理逻辑" tabindex="-1">5. 命令处理逻辑 <a class="header-anchor" href="#_5-命令处理逻辑" aria-label="Permalink to &quot;5. 命令处理逻辑&quot;">​</a></h3><ul><li><strong>&#39;CLEAR&#39; 命令</strong>：重置 <code>result</code> 和 <code>op</code>。</li><li><strong>&#39;EQUAL&#39; 命令</strong>：输出 <code>result</code> 的当前基数表示，重置 <code>op</code>。</li><li><strong>&#39;CHANGE&#39; 命令</strong>：改变当前基数 <code>baseNum</code>的进制。</li><li><strong>&#39;NUM&#39; 命令</strong>： <ul><li>如果没有当前操作符，将参数转换为十进制并存储到 <code>result</code>。</li><li>如果有当前操作符，执行相应的运算并更新 <code>result</code>。</li></ul></li><li><strong>其他</strong>：设置当前操作符。</li></ul><h2 id="四、技术细节" tabindex="-1">四、技术细节 <a class="header-anchor" href="#四、技术细节" aria-label="Permalink to &quot;四、技术细节&quot;">​</a></h2><p>对于有一定编程基础但是对python还不够熟悉的小伙伴们，一定会对python中与C/C++代码不同的地方感到陌生，下面的内容我来为大家详细的解释一下</p><h3 id="_1-int-char-base-36-这玩意" tabindex="-1">1. int(char, base=36)这玩意 <a class="header-anchor" href="#_1-int-char-base-36-这玩意" aria-label="Permalink to &quot;1. int(char, base=36)这玩意&quot;">​</a></h3><p>在 Python 中，<code>int()</code> 函数可以用来将一个字符串转换为整数。当 <code>int()</code> 函数用于进制转换时，它可以接受两个参数：第一个参数是要转换的字符串，第二个参数是基数（base），表示当前数字的进制系统。</p><p><code>int(char, base=36)</code> 这个表达式的作用是将字符串 <code>char</code> 从 36 进制转换为十进制数。在这里，<code>base=36</code> 表示该函数可以处理从 0 到 9 的数字和从 A 到 Z 的字母（总共 36 个符号）。每个字符都被视为一个单独的 36 进制数。</p><p>举例来说：</p><ul><li>如果 <code>char</code> 是 <code>&#39;1&#39;</code>，则 <code>int(&#39;1&#39;, 36)</code> 返回 1。</li><li>如果 <code>char</code> 是 <code>&#39;A&#39;</code> 或 <code>&#39;a&#39;</code>，<code>int(&#39;A&#39;, 36)</code> 或 <code>int(&#39;a&#39;, 36)</code> 返回 10，因为在 36 进制中，&#39;A&#39; 或 &#39;a&#39; 表示 10。</li><li>如果 <code>char</code> 是 <code>&#39;Z&#39;</code> 或 <code>&#39;z&#39;</code>，<code>int(&#39;Z&#39;, 36)</code> 或 <code>int(&#39;z&#39;, 36)</code> 返回 35，这是 36 进制中的最大单个数值。</li></ul><h3 id="_2-chr-ord-a-decimalnum-basenum-10-这玩意" tabindex="-1">2. chr(ord(&#39;A&#39;) + decimalNum % baseNum - 10))这玩意 <a class="header-anchor" href="#_2-chr-ord-a-decimalnum-basenum-10-这玩意" aria-label="Permalink to &quot;2. chr(ord(&#39;A&#39;) + decimalNum % baseNum - 10))这玩意&quot;">​</a></h3><p>这个表达式用于将10到15的数字转换为对应的十六进制字符（&#39;A&#39;到&#39;F&#39;）。在许多进制转换中，当数字大于或等于10时，会使用字母来表示这些数值。</p><p>这个表达式是如何工作的：</p><ol><li><strong><code>ord(&#39;A&#39;)</code></strong>: 这是 Python 中的 <code>ord</code> 函数，它返回一个字符的 Unicode 码点。对于字符 &#39;A&#39;，它的码点是 65（这是 &#39;A&#39; 在 Unicode 和 ASCII 编码中的数值）。</li><li><strong><code>decimalNum % baseNum - 10</code></strong>: 这里 <code>decimalNum % baseNum</code> 是我们需要转换的数字，它的范围是10到15（对应十六进制中的 &#39; A&#39; 到 &#39;F&#39;）。<code>decimalNum % baseNum - 10</code> 将这个数值转换为0到5。这是因为我们希望10映射到0（因为&#39;A&#39; 是从10开始的对应字符），11映射到1，依此类推。</li><li><strong><code>ord(&#39;A&#39;) + decimalNum % baseNum - 10</code></strong>: 将 &#39;A&#39; 的码点与 <code>decimalNum % baseNum - 10</code> 的结果相加。例如，如果 <code>decimalNum % baseNum</code> 是10（我们希望得到 &#39;A&#39;），<code>decimalNum % baseNum - 10</code> 就是0，所以 <code>ord(&#39;A&#39;) + 0</code> 等于65，即 &#39;A&#39; 的码点。如果 <code>decimalNum % baseNum</code> 是11，<code>decimalNum % baseNum - 10</code> 就是1，那么 <code>ord(&#39;A&#39;) + 1</code> 就是66，这是 &#39;B&#39; 的码点。</li><li><strong><code>chr(...)</code></strong>: 最后，<code>chr</code> 函数将这个码点转换回对应的字符。所以，如果码点是65，<code>chr</code> 函数会返回 &#39;A&#39;；如果码点是66，<code>chr</code> 函数会返回 &#39;B&#39;；依此类推。</li></ol><h3 id="_3-join-reversed-digits-这玩意" tabindex="-1">3. &#39; &#39;.join(reversed(digits))这玩意 <a class="header-anchor" href="#_3-join-reversed-digits-这玩意" aria-label="Permalink to &quot;3. &#39; &#39;.join(reversed(digits))这玩意&quot;">​</a></h3><p>用于将一个字符列表 <code>digits</code> 转换成一个字符串。这里，它用于创建数制转换的结果字符串。让我们分解这个表达式来更好地理解它：</p><ol><li><strong><code>digits</code></strong>： <ul><li>这是一个列表，其中的元素是字符串。这些字符串代表了一个数字在转换到另一进制时的各个位的值。</li></ul></li><li><strong><code>reversed(digits)</code></strong>： <ul><li><code>reversed</code> 是一个内置函数，用于反转序列（例如列表、字符串等）。在这里，它将 <code>digits</code> 列表中的元素顺序颠倒过来。</li><li>数制转换时，通常从最低位开始计算，然后依次向高位进展。因此，转换完成时，最低位实际上位于列表的末尾。为了得到正确的顺序（即最高位在前），需要将列表反转。</li></ul></li><li><strong><code>&#39;&#39;.join(...)</code></strong>： <ul><li><code>join</code> 是字符串类型的一个方法，用于将序列中的元素连接成一个字符串。这里的 <code>&#39;&#39;</code> （空字符串）表示用来连接列表元素的分隔符。由于分隔符为空，因此列表中的元素将会直接相连，没有任何字符插入它们之间。</li><li>例如，如果 <code>reversed(digits)</code> 的结果是 <code>[&#39;1&#39;, &#39;2&#39;, &#39;3&#39;]</code>，<code>&#39;&#39;.join(reversed(digits))</code> 将会产生字符串 <code>&#39;123&#39;</code>。</li></ul></li></ol><p>总结来说，<code>&#39;&#39;.join(reversed(digits))</code> 是一种常见的编程模式，用于将一系列的小片段组合成一个完整的字符串，同时保证顺序正确。这种方法在处理数字转换为字符串表示时尤其常见。</p><h3 id="_4-add-lambda-a-b-a-b-这玩意" tabindex="-1">4. &#39;ADD&#39;: lambda a, b: a + b,这玩意 <a class="header-anchor" href="#_4-add-lambda-a-b-a-b-这玩意" aria-label="Permalink to &quot;4.  &#39;ADD&#39;: lambda a, b: a + b,这玩意&quot;">​</a></h3><p><code>lambda</code> 函数在 Python 中是一种创建小型匿名函数的方式。它的语法简单，主要用于需要一个函数的地方，但该函数又足够简单以至于不必单独定义。<code>lambda</code> 函数可以接受任意数量的参数，但只能有一个表达式，其计算结果就是这个函数的返回值。</p><p><code>lambda</code> 函数的基本语法是：</p><div class="vp-code-group vp-adaptive-theme"><div class="tabs"><input type="radio" name="group-sSWSW" id="tab-_CELuDq" checked><label for="tab-_CELuDq">python</label></div><div class="blocks"><div class="language-python vp-adaptive-theme active line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">lambda</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> arguments: expression</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div></div></div><p>这里，<code>arguments</code> 是传递给函数的参数，<code>expression</code> 是关于这些参数的表达式，其值作为函数的返回值。</p><p>在您的代码中，<code>lambda</code> 函数被用于创建简单的一行函数，以处理不同的数学运算：</p><div class="vp-code-group vp-adaptive-theme"><div class="tabs"><input type="radio" name="group-3P7w6" id="tab-SICfFdq" checked><label for="tab-SICfFdq">python</label></div><div class="blocks"><div class="language-python vp-adaptive-theme active line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">operations </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">    &#39;ADD&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">lambda</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> a, b: a </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">+</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> b,</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">    &#39;SUB&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">lambda</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> a, b: a </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> b,</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">    &#39;MUL&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">lambda</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> a, b: a </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">*</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> b,</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">    &#39;DIV&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">lambda</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> a, b: a </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">//</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> b,</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">    &#39;MOD&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">lambda</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> a, b: a </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">%</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> b,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br></div></div></div></div><p>在这个 <code>operations</code> 字典中，每个键（如 &#39;ADD&#39;, &#39;SUB&#39; 等）都对应一个 <code>lambda</code> 函数作为其值。这些 <code>lambda</code> 函数接收两个参数 <code>a</code> 和 <code>b</code>，并执行相应的算术运算。</p><p>例如：</p><ul><li><code>lambda a, b: a + b</code> 创建了一个匿名函数，它接受两个参数 <code>a</code> 和 <code>b</code> 并返回它们的和。</li><li><code>lambda a, b: a - b</code> 返回两个参数的差。</li></ul><p>在主循环中，根据用户输入的运算符（存储在 <code>op</code> 变量中），从 <code>operations</code> 字典中选择相应的 <code>lambda</code> 函数，并调用它来执行计算：</p><div class="vp-code-group vp-adaptive-theme"><div class="tabs"><input type="radio" name="group-v_dtr" id="tab-iUOtMkD" checked><label for="tab-iUOtMkD">python</label></div><div class="blocks"><div class="language-python vp-adaptive-theme active line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">result </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> opCode(result, toDecimal(cmd[</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">], baseNum), op)</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div></div></div><p>这里的 <code>opCode</code> 函数实际上通过 <code>operations[op]</code> 获取相应的 <code>lambda</code> 函数，并用 <code>result</code> 和 <code>toDecimal(cmd[1], baseNum)</code> 作为参数来调用它。</p><p>使用 <code>lambda</code> 函数的这种方式使代码更加紧凑和易于理解，特别是在需要一系列简单函数时，这样可以避免定义许多几乎相同的小函数。</p><h3 id="_5-s-input-split-maxsplit-1-这玩意" tabindex="-1">5. s = input().split(maxsplit=1)这玩意 <a class="header-anchor" href="#_5-s-input-split-maxsplit-1-这玩意" aria-label="Permalink to &quot;5. s = input().split(maxsplit=1)这玩意&quot;">​</a></h3><p>在 Python 中，<code>input().split()</code> 方法用于将输入的字符串分割成子字符串，并返回这些子字符串的列表。当您为 <code>split()</code> 方法提供 <code>maxsplit</code> 参数时，它决定了分割操作的最大次数。下面详细解释 <code>s = input().split(maxsplit=1)</code> 这行代码的作用：</p><ol><li><strong>方法功能</strong>：<code>split()</code> 默认按照空白字符（如空格、换行符等）来分割字符串。如果没有指定分隔符，它将使用任何连续的空白字符作为分隔符。</li><li><strong>参数 <code>maxsplit=1</code></strong>：这个参数指定了分割操作的最大次数。在这里，<code>maxsplit=1</code> 表示最多分割一次。这意味着原始字符串 <code>s</code> 将被分割成最多两个部分：在第一个空白字符处分割。</li><li><strong>结果</strong>：如果原始字符串 <code>s</code> 中有空白字符，则 <code>split(maxsplit=1)</code> 会在第一个空白字符处将其分割为两部分，并返回包含这两部分的列表。如果 <code>s</code> 中没有空白字符，或者空白字符在字符串的开头，那么返回的列表将只包含原始字符串本身。</li><li><strong>示例</strong>： <ul><li>假设 <code>s = &#39;COMMAND arg1 arg2&#39;</code>。在这种情况下，<code>s.split(maxsplit=1)</code> 会返回 <code>[&#39;COMMAND&#39;, &#39;arg1 arg2&#39;]</code>。</li><li>如果 <code>s = &#39;COMMAND&#39;</code>（没有空格），则返回 <code>[&#39;COMMAND&#39;]</code>。</li></ul></li></ol><h3 id="_6-operations-op-result-num-这玩意" tabindex="-1">6. operations[op](result, num)这玩意 <a class="header-anchor" href="#_6-operations-op-result-num-这玩意" aria-label="Permalink to &quot;6. operations[op](result, num)这玩意&quot;">​</a></h3><p>这行代码使用了 Python 的条件表达式（也称为三元运算符）来决定 <code>result</code> 的值。让我们逐步解析这个表达式：</p><div class="vp-code-group vp-adaptive-theme"><div class="tabs"><input type="radio" name="group-2nfgk" id="tab-RvLh2WD" checked><label for="tab-RvLh2WD">python</label></div><div class="blocks"><div class="language-python vp-adaptive-theme active line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">result </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> num </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">if</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> not</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> op </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">else</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> operations[op](result, num)</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div></div></div><ol><li><strong>条件表达式结构</strong>: <ul><li><strong>条件部分</strong>: <code>not op</code> —— 检查变量 <code>op</code>（存储当前操作符）是否为空。</li><li><strong>真值结果</strong>: <code>num</code> —— 如果 <code>op</code> 为空（即没有待执行的操作符），则 <code>result</code> 被赋值为 <code>num</code>。</li><li><strong>假值结果</strong>: <code>operations[op](result, num)</code> —— 如果 <code>op</code> 不为空，表达式执行字典 <code>operations</code> 中对应于 <code>op</code> 的 lambda 函数，并传入 <code>result</code> 和 <code>num</code> 作为参数。</li></ul></li><li><strong>操作逻辑</strong>: <ul><li>当用户输入一个新数字且没有之前的操作符时（例如，刚刚输入了 &#39;NUM&#39; 命令），<code>op</code> 为空，所以 <code>result</code> 设置为新输入的数字 <code>num</code>。</li><li>如果之前已有操作符（如 &#39;ADD&#39;, &#39;SUB&#39; 等），则使用该操作符对应的函数（在 <code>operations</code> 字典中查找）来处理 <code>result</code> 和 <code>num</code>。例如，如果 <code>op</code> 是 &#39;ADD&#39;，则调用 <code>operations[&#39;ADD&#39;](result, num)</code>，它执行 <code>lambda a, b: a + b</code> ，即返回 <code>result + num</code> 的值。</li></ul></li><li><strong>代码作用</strong>: <ul><li>这行代码是计算器逻辑的核心，用于根据当前的操作符更新计算结果。</li><li>它允许在不同命令之间保持状态，并根据新的输入和之前的操作进行适当的数学运算。</li></ul></li></ol><p>这种使用条件表达式的方式既紧凑又高效，特别适用于需要根据条件选择不同操作的场景。</p><h2 id="总结" tabindex="-1">总结 <a class="header-anchor" href="#总结" aria-label="Permalink to &quot;总结&quot;">​</a></h2><p>在这篇博客中，深入分析了一个多进制计算器的 Python 实现，涵盖了进制转换、算术运算处理及命令解析。通过详细解释每个函数和关键代码段，展示了如何有效地使用条件表达式、字典、<code>lambda</code> 函数等编程技巧。这个案例不仅加强了对基础编程概念的理解，也提供了实际问题解决方案的宝贵经验。</p><div class="linkcard"><a href="https://vitepress.yiov.top/" target="_blank"><p class="description">Vitepress中文搭建教程<br><span>https://vitepress.yiov.top/</span></p><div class="logo"><img alt="Logo" width="70px" height="70px" src="https://vitepress.yiov.top/logo.png"></div></a></div>`,63),h=[p];function t(k,d,r,o,E,c){return a(),i("div",null,h)}const y=s(e,[["render",t]]);export{b as __pageData,y as default};
